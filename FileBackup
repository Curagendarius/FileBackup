#!/bin/bash

#Функция ротации архивов (уделение устаревших архивов)
funArhRotation ()
{
	#Удаление старых ежемесячных архивов
	let "TailArg = ArhNumMonthly + 1"
	IFS=$'\n'; for NextOldMonthly in `ls -t $ArchPath$ArchTemplate"-monthly"* | tail -n +$TailArg`; 
	do
		if [ $NextOldMonthly != $ArchFullName ]; 
		then
			#Удаляем текущий архив
			`rm -f $NextOldMonthly 2>> $BackupLog`

			#Проверяем удачно ли произошло удаление старого архива
			if [ $? -eq 0 ];
			then
				#Если удаление прошло удачно, то пишем в лог о удачном удалении старого архива
				printf `(date +%Y-%m-%d-%H-%M-%S)`": Старый архив "$NextOldMonthly" успешно удален \n" >> $BackupLog
			else
				#Если удаление прошло неудачно, то ошибка
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА удаления старого архива: "$NextOldMonthly" \n" >> $BackupLog
				flagOKGlobal=false
			fi 
		fi
	done

	#Удаление старых еженедельных архивов
	let "TailArg = ArhNumWeekly + 1"
	IFS=$'\n'; for NextOldWeekly in `ls -t $ArchPath$ArchTemplate"-weekly"* | tail -n +$TailArg`; 
	do
		if [ $NextOldWeekly != $ArchFullName ]; 
		then
			#Удаляем текущий архив
			`rm -f $NextOldWeekly 2>> $BackupLog`

			#Проверяем удачно ли произошло удаление старого архива
			if [ $? -eq 0 ];
			then
				#Если удаление прошло удачно, то пишем в лог о удачном удалении старого архива
				printf `(date +%Y-%m-%d-%H-%M-%S)`": Старый архив "$NextOldWeekly" успешно удален \n" >> $BackupLog
			else
				#Если удаление прошло неудачно, то ошибка
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА удаления старого архива: "$NextOldWeekly" \n" >> $BackupLog
				flagOKGlobal=false
			fi
		fi
	done

	#Удаление старых ежедневных архивов
	let "TailArg = ArhNumDaily + 1"
	IFS=$'\n'; for NextOldDaily in `ls -t $ArchPath$ArchTemplate"-daily"* | tail -n +$TailArg`; 
	do
		if [ $NextOldDaily != $ArchFullName ]; 
		then
			#Удаляем текущий архив
			`rm -f $NextOldDaily 2>> $BackupLog`

			#Проверяем удачно ли произошло удаление старого архива
			if [ $? -eq 0 ];
			then
				#Если удаление прошло удачно, то пишем в лог о удачном удалении старого архива
				printf `(date +%Y-%m-%d-%H-%M-%S)`": Старый архив "$NextOldDaily" успешно удален \n" >> $BackupLog
			else
				#Если удаление прошло неудачно, то ошибка
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА удаления старого архива: "$NextOldDaily" \n" >> $BackupLog
				flagOKGlobal=false
			fi 
		fi
	done
}

#Функция обработки каждого задания на архивацию
funArhCreation ()
{

	#Флаг успешности выполнения каждого задания на архивацию
	flagOKLocal=true

	#Флаг надо ли делать сейчас диференциальный архив
	flagFullNow=true

	#Если последним символом каталога назначения не является "/" то добавляем его
	if [ ${ArchPath:(-1):1} != "/" ] 
	then
		ArchPath=$ArchPath"/"
	fi

	#Имя флагового файла последнего удачного архива
	FileFlagOK=$ArchPath$ArchTemplate".flag"

	#Если источник недоступен для чтения, то ошибка создания архива
	if [  ! -r $SrcPath ] 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с шаблоном имени: "$ArchPath$ArchTemplate" Источник "$SrcPath" не доступен для чтения \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	fi

	#Если каталог назначения недоступен для записи, то ошибка содания архива
	if [  ! -w $ArchPath ] || [  ! -d $ArchPath ] 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с шаблоном имени: "$ArchPath$ArchTemplate" Каталог "$ArchPath" не доступен для записи или не явлется каталогом \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	fi

	#Формируем имя архива
	printf "\n" >> $BackupLog

	
	
	#Ищем имя самого последнего ежемесячного архива 
	OldEndMonthlyArh=`ls -t $ArchPath$ArchTemplate"-monthly"*".tar.gz" | head -1`
			
	#Проверяем а есть ли вообще последний ежемесячный архив
	if [ -a $OldEndMonthlyArh ] && [ ! -z $OldEndMonthlyArh ]
	then
		#Если у нового архива месяц новый и ArhNumMonthly>0 то суфикс имени архива будет monthly
		if [ ${OldEndMonthlyArh:(-24):2} != `date +%m` ] && [ $ArhNumMonthly -gt 0 ] && [ $InputParam == "nodaily" ]
		then
			ArhSufix="monthly"
		fi
	else 
		if [ $ArhNumMonthly -gt 0 ]
		then
			ArhSufix="monthly"
		fi
	fi

	#Ищем имя самого последнего еженедельного архива
	OldEndWeeklyArh=`ls -t $ArchPath$ArchTemplate"-weekly"*".tar.gz" | head -1`

	#Проверяем а есть ли вообще последний еженедельный архив
	if [ -a $OldEndWeeklyArh ] && [ ! -z $OldEndWeeklyArh ]
	then
		#Если неделя изменилась, а ArсhSufix="" и ArсhNumWeekly>0 то суфикс имени архива будет weekly 
		if [ ${OldEndWeeklyArh:(-18):2} != `date +%U` ] && [ $ArhNumWeekly -gt 0 ] && [ -z $ArhSufix ]  && [ $InputParam == "nodaily" ]
		then
			ArhSufix="weekly"
		fi
	else
		if [ -z $ArhSufix ] && [ $ArhNumWeekly -gt 0 ]
		then
			ArhSufix="weekly"
		fi
	fi
	

	#Если ArhSufix="" и ArсhNumDaily>0 то суфикс имени архива будет daily
	#
	if [ $ArhNumDaily -gt 0 ] && [ -z $ArhSufix ]
	then
		ArhSufix="daily"
		if [ $ArchType = "diff" ]
		then
			flagFullNow=false
		fi
	fi

	#Ищем опорный полный архив если делаем сейчас диференциальную копию
	if [ $flagFullNow = false ]
	then
	 	#Ищем журнал поддержки диференциальных копий последнего полного архива (он имеет имя кончающееся на .diff)
	 	ArchNameDiffFull=`ls -t $ArchPath$ArchTemplate*.diff | head -n 1`
	 	if [ -a $ArchNameDiffFull ] && [ ! -z $ArchNameDiffFull ]
	 	then
	 		#Генерим суффикс для имени архива с указанием на полный архив
	 		ArhDiffSufix=`echo ${ArchNameDiffFull##*/} | sed 's/.diff//g' | rev | cut -c 1-22 | rev`
	 	else
	 		#Если опорного архива нет то будем делать или weekly или monthly full
	 		#Но если настройками назначены только daily и при этом поставлен режим diff - то сообщаем админу о шибке
	 		if [ $ArhNumWeekly != "0" ]
	 		then
	 			ArhSufix="weekly"
	 			flagFullNow=true
	 		else
	 			if [ $ArhNumMonthly != "0" ]
	 			then
	 				ArhSufix="monthly"
	 				flagFullNow=true
	 			else
	 				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Настройки архива с шаблоном "$ArchPath$ArchTemplate" выполненны неверно. При диференциальной резервной копии должен быть запланироваг хотя бы один ежедневный или ежемесячный архив. \n" >> $BackupLog
	 				flagOKGlobal=false
	 			fi
	 		fi		
	 	fi
	fi 

	#Если суфикс архива не определен то ошибка задачи параметров архива
	if [ -z $ArhSufix ] 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с шаблоном имени: "$ArchPath$ArchTemplate" Не задано ненулевое количество архивов \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	else
		#Иначе генерируем имя нового архива 
		if [ $flagFullNow = true ] 
		then
			#Если делаем полный архив
			ArchFullName=$ArchPath$ArchTemplate"-"$ArhSufix"-"`(date +%Y-%m-%d-%U-%H_%M_%S)`".tar.gz"
			if [ $ArchType = "diff" ]
			then
				#Генерим имя журнала нового опорного полного архива
				ArchNameDiffFull=$ArchPath$ArchTemplate"-"$ArhSufix"-"`(date +%Y-%m-%d-%U-%H_%M_%S)`".diff"
			fi
		else
			#Если делаем архив с поддержкой диференциальных копий и ежедневный архив то в имени надо указать ссылку на опорный полный архив
			ArchFullName=$ArchPath$ArchTemplate"-"$ArhSufix"-From-"$ArhDiffSufix"-To-"`(date +%Y-%m-%d-%U-%H_%M_%S)`".tar.gz"
		fi
	fi

	#Если файл с таким именем архива существует - то ошибка архива
	if [ -a $ArchFullName ] && [ ! -z $ArchFullName ]
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" Архив с таким именем уже существует - архив не создан \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	fi

	#Создаем имя временного файла архива
	TempArchFullName=$ArchPath$ArchTemplate"-temp"
	# Если временный файл существует то проверяем не истекло ли предельное время выполнения архива
	if [ -a $TempArchFullName ] && [ ! -z $TempArchFullName ]
	then
		#В любом случае пропускаем это задание
		flagOKLocal=false
		
		#Если предельное время исполнения архива прошло, то сообщаем о глобальной ошибке
		if [ -r $FileFlagOK ]
		then
			TimeLastOk=`head -n1 $FileFlagOK | tr -d "\n"`
			NowTime=`date +"%s"`
			let "DeltaTime = ( NowTime - TimeLastOk ) / 3600"
			if [ $DeltaTime -ge $ArhTime ]; then
				flagOKGlobal=false
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Обнаружено, что предыдущее выполнение архива "$ArchFullName" из источника "$SrcPath" еще не завершено, а предельное время создания архива "$ArhTime" часов превышено и составляет "$DeltaTime" часов\n" >> $BackupLog
			else
				printf `(date +%Y-%m-%d-%H-%M-%S)`": Обнаружено, что предыдущее выполнение архива "$ArchFullName" из источника "$SrcPath" еще не завершено, но предельное время "$ArhTime" часов еще не превышено, так как прошло всего "$DeltaTime" часов\n" >> $BackupLog
			fi			
		else
			flagOKGlobal=false
			printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Обнаружено, что предыдущее выполнение архива "$ArchFullName" из источника "$SrcPath" еще не завершено\n" >> $BackupLog
		fi			
	else

		#Если надо то создаем имя файла журнала диференциального архива
		if [ $ArchType = "diff" ]
		then
			#Временное имя файла журнала диференциального архива
			TempArchDiffName=$ArchPath$ArchTemplate"-tempdiff"
			#Если такой файл существует то ошибка локальная и глобальная
			if [ -a $TempArchDiffName ] && [ ! -z $TempArchDiffName ]
			then
				flagOKLocal=false
				flagOKGlobal=false
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" Временный журнал поддержки диференциальный копий существует, а временного архива нет\n" >> $BackupLog
			fi
		fi
	fi

	#Если надо делать диференциальный архив то находим копируем последний опортный журнал архива как текущий временный журнал
	if [[ $ArchType = "diff" && $flagFullNow = false ]] 
	then
		`cp $ArchNameDiffFull $TempArchDiffName`
		if [ -a $TempArchDiffName ] && [ ! -z $TempArchDiffName ]
		then
			printf `(date +%Y-%m-%d-%H-%M-%S)`": Временный файл журнала архива  "$ArchFullName" из источника "$SrcPath" успешно преименован из файла журнала последнего полного архива "$ArchNameDiffFull"\n" >> $BackupLog
		else
			printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Копирование журнала архива "$ArchFullName" из источника "$SrcPath" не удалось из файла журнала последнего полного архива "$ArchNameDiffFull"\n" >> $BackupLog
			flagOKGlobal=false
			flagOKLocal=false
		fi
	fi
	
	

	#Если ошибок подготовки архивации этого задания на архивацию не было, то начинаем архивацию
	if [ $flagOKLocal = true ] 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": Начало создания архива "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog
		
		#проверяем надо ли использовать режим дифернциальных резервных копий
		if [ $ArchType = "diff" ]
		then
			#делаем архив с поддержкой диференциальных копий
			`tar -czpf $TempArchFullName $SrcPath -g $TempArchDiffName 2>> $BackupLog`
		else
			#делаем архив без поддержки диференциальных копий
			`tar -czpf $TempArchFullName $SrcPath 2>> $BackupLog`
		fi
		

		#Проверяем удачно ли произошло архивирование
		if [ $? -eq 0 ];
		then
			printf `(date +%Y-%m-%d-%H-%M-%S)`": Архив "$ArchFullName" успешно создан \n" >> $BackupLog

			if [ -a $ArchFullName ] && [ ! -z $ArchFullName ]
			then
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" Архив с таким именем уже существует - невозможно переименовать временный файл архива \n" >> $BackupLog
				flagOKGlobal=false	
			else
				#переименовываем временный файл архива
				`mv $TempArchFullName $ArchFullName`
				#Если переименовать не получилось то ошибка
				if [ -a $ArchFullName ] && [ ! -z $ArchFullName ]
				then
					printf `(date +%Y-%m-%d-%H-%M-%S)`": Временный файл архива "$ArchFullName" из источника "$SrcPath" успешно преименован\n" >> $BackupLog
					
					#Так как успешно создали полный архив, то удаляем все неудачные архивы (.error), которые найдем
					if [ $flagFullNow = true ]
					then
						`rm -f $ArchPath$ArchTemplate*.error 2>> $BackupLog`
						### Если ошибочные архивы все еще есть то ошибка
						ErrorArchTestName=`ls -t $ArchPath$ArchTemplate*.error | head -n 1`
	 					if [ -a $ErrorArchTestName ] && [ ! -z $ErrorArchTestName ]
	 					then
	 						printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА после создания арзива с именем: "$ArchFullName". Не удалось удалить файлы ошибочных архивов после успешного создания полного архива.\n" >> $BackupLog
	 						flagOKGlobal=false
	 					fi
					fi
				else
					printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath" не удалось переименовать временный файл архива \n" >> $BackupLog
					flagOKGlobal=false
					flagOKLocal=false
				fi

				#Если в этом архиве включена поддержка диференциальных копий то надо обработать журналы
				if [ $ArchType = "diff" ] 
				then
					if [ $flagFullNow = true ]
					then
						#Если это полный архив, то сохраняем временный журнал архива с поддержкой диференциальных копий, как журнал последнего полного архива 
						#перед этим удаляем все файлы с расширение diff для этого шаблона архива
						`rm -f $ArchPath$ArchTemplate*.diff 2>> $BackupLog`

						if [ -a $ArchNameDiffFull ] && [ ! -z $ArchNameDiffFull ]
						then
							printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath". Имя файла для нового журнала последнего полного архива занято "$ArchNameDiffFull" \n" >> $BackupLog
							flagOKGlobal=false
							flagOKLocal=false
						else
							`mv $TempArchDiffName $ArchNameDiffFull`
							if [ -a $ArchNameDiffFull ] && [ ! -z $ArchNameDiffFull ]
							then
								printf `(date +%Y-%m-%d-%H-%M-%S)`": Успешно скопирован из временного файл "$ArchNameDiffFull" для нового журнала последнего полного архива с именем: "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog
							else
								printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath". Не удалось скопировать временный файл для нового журнала последнего полного архива "$ArchNameDiffFull" \n" >> $BackupLog
								flagOKGlobal=false
								flagOKLocal=false
							fi
						fi
					else
						#Если это дифиренциальный архив, удаляем временный журнал архива с поддержкой диференциальных копий
						`rm -f $TempArchDiffName 2>> $BackupLog`
						if [ -a $TempArchDiffName ] && [ ! -z $TempArchDiffName ]
						then
							printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath". Не удалось удалить временный файл журнала поддержки диференциальных копий "$TempArchDiffName"\n" >> $BackupLog
							flagOKGlobal=false
							flagOKLocal=false
						else
							printf `(date +%Y-%m-%d-%H-%M-%S)`": Успешно удален временный файл журнала поддержки диференциальных копий "$TempArchDiffName" для архива с именем: "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog	
						fi
					fi
				fi
			fi

			#Если ошибок нет, то обнавляем флаговый файл с временем последнего удачного архива
			if [ $flagOKLocal == true ]
			then
				TempOKTime=`date +"%s"`
				`echo $TempOKTime > $FileFlagOK`

				#Проверяем удалось ли обновить флаговый файл удачного создания архива
				if [ `head -n1 $FileFlagOK | tr -d "\n"` == $TempOKTime ]
				then
					#Запускаем функцию удаления ненужных архивов (ротация архивов)
					funArhRotation
				else
					printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath". Нк удалось обновить флаговый файл времени последнего удачного архива "$FileFlagOK" \n" >> $BackupLog
					flagOKGlobal=false
				fi
			fi
		else
			printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath" Процесс создания архива прошел с ошибками \n" >> $BackupLog
			flagOKGlobal=false
			#Создаем имя для файла неудавшегося архива 
			ErrorArchFullName=$ArchFullName".error"

			#Если файл с именем файла неудавшегося архива существует то удаляем его
			if [ -a $ErrorArchFullName ] && [ ! -z $ErrorArchFullName ]
			then
				`rm -f $ErrorArchFullName 2>> $BackupLog`
				### Если удалить файл не получилось то ошибка
	 			if [ -a $ErrorArchFullName ] && [ ! -z $ErrorArchFullName ]
	 			then
	 				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Файл с именем "$ErrorArchFullName" занят. Поэтому не удалось скопировать неудачную копию архива "$ArchFullName".\n" >> $BackupLog
	 				#Так как имя фалйа неудавшегося архива занято, то удаляем временную копию архива
	 				`rm -f $TempArchDiffName  2>> $BackupLog`
					if [ -a $TempArchDiffName ] && [ ! -z $TempArchDiffName ]
					then
						printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Не удалось удалить временный файл неудавшегося архива "$ArchNameDiffFull"  "$TempArchDiffName"\n" >> $BackupLog
					else
						printf `(date +%Y-%m-%d-%H-%M-%S)`": Временный файл архива "$ArchFullName" успешно удален. \n" >> $BackupLog	
					fi
	 			else
	 				#Переименовываем временный файл неудавшего архива
	 				`mv $TempArchFullName $ErrorArchFullName`
	 				if [ -a $ErrorArchFullName ] && [ ! -z $ErrorArchFullName ]
					then
						printf `(date +%Y-%m-%d-%H-%M-%S)`": Временный файл неудавшегосчя архива "$ArchFullName" успешно переименован в файл "$ErrorArchFullName"\n" >> $BackupLog	

						
					else
						printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Не удалось переименовать временный файл неудавшегося архива "$ArchNameDiffFull"  "$TempArchDiffName"\n" >> $BackupLog	
						#Так как не удалось переименовать то удаляем временный файл архива
						`rm -f $TempArchDiffName  2>> $BackupLog`
						if [ -a $TempArchDiffName ] && [ ! -z $TempArchDiffName ]
						then
							printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА: Не удалось удалить временный файл неудавшегося архива "$ArchNameDiffFull"  "$TempArchDiffName"\n" >> $BackupLog
						else
							printf `(date +%Y-%m-%d-%H-%M-%S)`": Временный файл архива "$ArchFullName" успешно удален. \n" >> $BackupLog	
						fi
					fi
	 			fi
	 		fi			

			#Eсли был файл с временным журналом диференциальных копий то удаляем его
			if [ -a $TempArchDiffName ] && [ ! -z $TempArchDiffName ]
			then
				`rm -f $TempArchDiffName 2>> $BackupLog`
				if [ -a $TempArchDiffName ] && [ ! -z $TempArchDiffName ]
				then
					printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath". Не удалось удалить временный файл журнала поддержки диференциальных копий "$TempArchDiffName"\n" >> $BackupLog
					flagOKGlobal=false
					flagOKLocal=false
				else
					printf `(date +%Y-%m-%d-%H-%M-%S)`": Успешно удален временный файл журнала поддержки диференциальных копий "$TempArchDiffName" для архива с именем: "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog	
				fi
			fi
		fi 
	fi
}


##############################
###  ТОЧКА СТАРТА СКРИПТА  ###

#Флаг  нормального завершения всей процедуры резервного копирования
flagOKGlobal=true

#Определяем путь запуска скрипта
# current path resolver from http://stackoverflow.com/a/246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
INSTALL_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
SCRIPT_NAME=$INSTALL_DIR"/"$(basename "$SOURCE")

#Задаем рассположение логфайлов
BackupLog="/var/log/FileBackup.log"
ErrorLog="/var/log/FileBackupERROR.log"
FileWorkCFG=$INSTALL_DIR"/work.cfg"

#Если нет файла work.cfg то производим установку
if [ -a $FileWorkCFG ] && [ ! -z $FileWorkCFG ] 
then
	echo "Запускаем скрипт в рабочем режиме"

	InputParam=""

	case $@ in
		"daily" )
		#Делаем ежедневный бекап - в эти дни запускаются только ежедневные бекапы несмотря на то сменилась неделя или месяц
		InputParam="daily"
			;;
	esac
	if [ -z $InputParam ]
	then
		InputParam="nodaily"
	fi

	# Проверяем можем ли читать файл work.cfg
	if [ -r $FileWorkCFG ]
	then
		echo "Файл настроек найдени читается - начинаем реботу по резервному копированию"
	else
		echo "Файл настроек найдени но не читается - прерываем работу"
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА работы скрипта: Файл настроек найдени но не читается - прерываем работу \n" >> $BackupLog
		flagOKGlobal=false
	fi
else
	#Пишем всякое для пользователя-установщика
	echo "Призводим установку скрипта "$SCRIPT_NAME


	#Создаем файл work.cfg
	echo "Создаем файл work.cfg"

	echo "# В данном списке по каждому источнику архивации заполняется следующие строки:" > $FileWorkCFG
	echo "#	1) путь к папке источника	архивации (что архивируем)" >> $FileWorkCFG
	echo "#	2) путь к папке куда будем складывать архивы" >> $FileWorkCFG
	echo "#	3) шаблон имени архива. К шаблогу будет добавлен суфикс типа (Daily, Weekly, Monthly) архива и дата арихива для получения имени архива" >> $FileWorkCFG
	echo "#	4) full или diff - если full, то делаем все архивы будут полными; если diff, то ежедневные архивы всегда диференциальные относительно последнего полного архива " >> $FileWorkCFG 		
	echo "# 5) предельное время создания архива в часах - имеет смысл если полный архив создается более 24 часов в этом случае не будет ошибки в течении указанного времени" >> $FileWorkCFG 
	echo "#	6) сторка дополнительных параметров с разделителем |" >> $FileWorkCFG
	echo "#		a) количество ежедневных копий" >> $FileWorkCFG
	echo "#		c) количество еженедельных копий (необязательный параметр)" >> $FileWorkCFG
	echo "#		d) количество ежемесячных копий (необязательный параметр)" >> $FileWorkCFG
	echo "#" >> $FileWorkCFG
	echo "# Пример:" >> $FileWorkCFG
	echo "# /var/lib/plexmediaserver" >> $FileWorkCFG
	echo "# /mnt/BackUp/Plex/" >> $FileWorkCFG
	echo "# plexSettings" >> $FileWorkCFG
	echo "# full" >> $FileWorkCFG
	echo "# 0" >> $FileWorkCFG
	echo "# 40" >> $FileWorkCFG
	echo "#" >> $FileWorkCFG
	echo "# /usr/plex" >> $FileWorkCFG
	echo "# /mnt/Bаckup/Plex/" >> $FileWorkCFG
	echo "# plexProg" >> $FileWorkCFG
	echo "# full" >> $FileWorkCFG
	echo "# 47" >> $FileWorkCFG
	echo "# 4|4|6" >> $FileWorkCFG
	echo "#" >> $FileWorkCFG
	echo "# /home/user/temp" >> $FileWorkCFG
	echo "# /mnt/Backup/НomeUserTemp/" >> $FileWorkCFG
	echo "# HomeUserTemp" >> $FileWorkCFG
	echo "# diff" >> $FileWorkCFG
	echo "# 0" >> $FileWorkCFG
	echo "# 3" >> $FileWorkCFG
	echo "#" >> $FileWorkCFG
	echo "# Первое задание архивации" >> $FileWorkCFG

	#Устанавливаем права на файл work.cfg
	if [ -a $FileWorkCFG ] && [ ! -z $FileWorkCFG ]
	then
		`chmod 660 $FileWorkCFG`
		if [ $? -ne 0 ];
		then 
			echo "Не удается задать права на логфайл "$FileWorkCFG
			flagOKGlobal=false
		fi
	else
		echo "Не удается создать файл "$FileWorkCFG
		flagOKGlobal=false
	fi

	#Устанавливаем права на себя
	if [ -a $SCRIPT_NAME ] && [ ! -z $SCRIPT_NAME ]
	then
		`chmod 760 $SCRIPT_NAME`
		if [ $? -ne 0 ];
		then 
			echo "Не удается задать права на логфайл "$SCRIPT_NAME
			flagOKGlobal=false
		fi
	else
		echo "Нет доступа к самому себе - "$SCRIPT_NAME
		flagOKGlobal=false
	fi

	#Пишем всякое для пользователя-установщика
	if [ flagOKGlobal ]; 
	then
		echo "Для установки скрипта в cron запустите crontab -e и добавтье следующие строки для выполнения каждый день в 23.30"
		echo "30 23 * * 5 "$INSTALL_DIR"/FileBackup"
		echo "30 23 * * 0-4,6 "$INSTALL_DIR"/FileBackup daily"
		echo "Задания на архивирование задайте в файле work.cfg"
	else
		echo "Во время установки скрипта возникли ошибки!!!"
	fi
fi

if [ ! -w $BackupLog ]
then
	`cat</dev/null>$BackupLog`
	if [ -a $BackupLog ] && [ ! -z $BackupLog ]
	then
		echo "Файл "$BackupLog" успешно создан"

		# Задаем права на чтение и редактирование для всех (664) на логфайл сессии резервного копирования
		`chmod 664 $BackupLog`
		if [ $? -ne 0 ]
		then 
			echo "Не удается задать права на логфайл "$BackupLog
			flagOKGlobal=false
		fi
	else
		echo "Не получается создать файл с именем "$BackupLog
		flagOKGlobal=false
	fi
fi

if [ ! -w $ErrorLog ]
then
	#Создание файла лога сессии резервного копирования 
	`cat</dev/null>$ErrorLog`
	if [ -a $ErrorLog ] && [ ! -z $ErrorLog ]
	then
		echo "Файл "$ErrorLog" успешно создан"
		# Задаем права на чтение и редактирование для всех (664) на логфайл ошибок сессии резервного копирования
		`chmod 664 $ErrorLog`
		if [ $? -ne 0 ];
		then 
			echo "Не удается задать права на логфайл "$ErrorLog
			flagOKGlobal=false
		fi
	else
		echo "Не получается создать файл с именем "$ErrorLog
		flagOKGlobal=false
	fi
fi



#Очищаем старый лог файл если он есть
cat /dev/null > $BackupLog
if [ $? -eq 0 ];
then 
	printf `(date +%Y-%m-%d-%H-%M-%S)`": Файл лога предыдущей сессии успешно удален \n" >> $BackupLog
else
	echo "Не возможно очистить лог сессии выполнения задания резервного копирования - задание остановленно !!!"
	flagOKGlobal=false
fi



if ( $flagOKGlobal = true );
then
	#Флаг для того чтобы в одном цикле считывать поочереди каждую строку для каждого источника архивирования
	SrcListStringIterator="0"
	
	#Очищаем файл с входными значениями заданий архитвации от комментариев и пропусков строк
	PurifiedListParam=`sed '/^\s*#/d;/^$/d;' $INSTALL_DIR/work.cfg`

	for NextListElement in $PurifiedListParam
	do
		case $SrcListStringIterator in
			"1"|"0" )
			SrcPath=$NextListElement
			SrcListStringIterator="2"
				;;

			"2" )
			ArchPath=$NextListElement
			SrcListStringIterator="3"
				;;

			"3" )
			ArchTemplate=$NextListElement
			SrcListStringIterator="4"
				;;

			"4" )
			ArchType=$NextListElement
			if [ $ArchType != "full" ] && [ $ArchType != "diff" ]
			then
				flagOKGlobal=false
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА чтения параметра типа архива "$SrcPath" из файла конфигурации - допустимо только одини из 2 видов параметров (full или diff) \n" >> $BackupLog
			fi
			SrcListStringIterator="5"
				;;

			"5" )
			ArhTime=$NextListElement
			SrcListStringIterator="6"
				;;

			"6" )
			ExtParams=$NextListElement
			SrcListStringIterator="1"

			#Разбираем строку дополнительных параетров
			ArhNumDaily=0
			ArhNumWeekly=0
			ArhNumMonthly=0
			ArhSufix=""
			ExtParamsStringIterator="0"

			
			IFS=$'|'; for NextParam in $ExtParams; 
			do
			 	case $ExtParamsStringIterator in
			 		"1"|"0" )
					ExtParamsStringIterator="2"
					ArhNumDaily=$NextParam
			 			;;
			 		"2" )
					ExtParamsStringIterator="3"
					ArhNumWeekly=$NextParam
			 			;;
			 		"3" )
					ArhNumMonthly=$NextParam
			 			;;	
			 	esac
			done 

			#Запускаем функцию создания архива для текущего задания архивации
			funArhCreation
				;;	
		esac
	done

	OkBackupNotificationScript=$INSTALL_DIR"/OKNotification.cfg"
	ErrorBackupNotificationScript=$INSTALL_DIR"/ErrorNotification.cfg"

	#Если все процессы архивирования прошли успешно, то очищаем лог ошибок. Если нет то отправляем лог текушей сессии с сообщением о ошибке по электронной почте 
	#и добавляем содержимое текущего лога в лог о ошибках
	if ( $flagOKGlobal = true );
	then
		echo "ВСЕ ЗАДАНИЯ АРХИВИРОВАНИЯ ВЫПОЛНЕННЫ УСПЕШНО. Подробности выполнения смотрте в логе "$BackupLog
		printf "\n" >> $BackupLog
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ВСЕ ЗАДАНИЯ АРХИВИРОВАНИЯ ВЫПОЛНЕННЫ УСПЕШНО" >> $BackupLog
		cat /dev/null > $ErrorLog
		###? сообщаем о успешном выполнении резервного копирования
		if [ -x $OkBackupNotificationScript ]
		then
			. $OkBackupNotificationScript $BackupLog
		fi


	else
		echo "ПРИ ВЫПОЛНЕНИИ ЗАДАНИЙ АРХИВИРОВАНИЯ БЫЛИ ОБНАРУЖЕНЫ ОШИБКИ. Подробности выполнения смотрте в логе "$ErrorLog
		printf "\n" >> $BackupLog
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ЗАДАНИЯ АРХИВИРОВАНИЯ ВЫПОЛНЕННЫ С ОШИБКАМИ !!! \n" >> $BackupLog
		printf "____________________________________________\n" >> $ErrorLog
		cat $BackupLog >> $ErrorLog
		###? отправляем $BackupLog с сообщением о ошибке
		if [ -x $ErrorBackupNotificationScript ]
		then
			. $ErrorBackupNotificationScript $BackupLog
		fi
	fi
fi	
