#!/bin/bash

#Функция ротации архивов (уделение устаревших архивов)
funArhRotation ()
{
	#Удаление старых ежемесячных архивов
	let "TailArg = ArhNumMonthly + 1"
	IFS=$'\n'; for NextOldMonthly in `ls -t $ArchPath$ArchTemplate"-monthly"* | tail -n +$TailArg`; 
	do
		if [ $NextOldMonthly != $ArchFullName ]; 
		then
			#Удаляем текущий архив
			`rm $NextOldMonthly`

			#Проверяем удачно ли произошло удаление старого архива
			if [ $? -eq 0 ];
			then
				#Если удаление прошло удачно, то пишем в лог о удачном удалении старого архива
				printf `(date +%Y-%m-%d-%H-%M-%S)`": Старый архив "$NextOldMonthly" успешно удален \n" >> $BackupLog
			else
				#Если удаление прошло неудачно, то ошибка
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА удаления старого архива: "$NextOldMonthly" \n" >> $BackupLog
				flagOKGlobal=false
			fi 
		fi
	done

	#Удаление старых еженедельных архивов
	let "TailArg = ArhNumWeekly + 1"
	IFS=$'\n'; for NextOldWeekly in `ls -t $ArchPath$ArchTemplate"-weekly"* | tail -n +$TailArg`; 
	do
		if [ $NextOldWeekly != $ArchFullName ]; 
		then
			#Удаляем текущий архив
			`rm $NextOldWeekly 2>> $BackupLog`

			#Проверяем удачно ли произошло удаление старого архива
			if [ $? -eq 0 ];
			then
				#Если удаление прошло удачно, то пишем в лог о удачном удалении старого архива
				printf `(date +%Y-%m-%d-%H-%M-%S)`": Старый архив "$NextOldWeekly" успешно удален \n" >> $BackupLog
			else
				#Если удаление прошло неудачно, то ошибка
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА удаления старого архива: "$NextOldWeekly" \n" >> $BackupLog
				flagOKGlobal=false
			fi 
		fi
	done

	#Удаление старых ежедневных архивов
	let "TailArg = ArhNumDaily + 1"
	IFS=$'\n'; for NextOldDaily in `ls -t $ArchPath$ArchTemplate"-daily"* | tail -n +$TailArg`; 
	do
		if [ $NextOldDaily != $ArchFullName ]; 
		then
			#Удаляем текущий архив
			`rm $NextOldDaily 2>> $BackupLog`

			#Проверяем удачно ли произошло удаление старого архива
			if [ $? -eq 0 ];
			then
				#Если удаление прошло удачно, то пишем в лог о удачном удалении старого архива
				printf `(date +%Y-%m-%d-%H-%M-%S)`": Старый архив "$NextOldDaily" успешно удален \n" >> $BackupLog
			else
				#Если удаление прошло неудачно, то ошибка
				printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА удаления старого архива: "$NextOldDaily" \n" >> $BackupLog
				flagOKGlobal=false
			fi 
		fi
	done
}

#Функция обработки каждого задания на архивацию
funArhCreation ()
{

	#Флаг успешности выполнения каждого задания на архивацию
	flagOKLocal=true

	#Если последним символом каталога назначения не является "/" то добавляем его
	if [ ${ArchPath:(-1):1} != "/" ]; 
	then
		ArchPath=$ArchPath"/"
	fi

	#Если источник недоступен для чтения, то ошибка создания архива
	if [  ! -r $SrcPath ]; 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с шаблоном имени: "$ArchPath$ArchTemplate" Источник "$SrcPath" не доступен для чтения \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	fi

	#Если каталог назначения недоступен для записи, то ошибка содания архива
	if [  ! -w $ArchPath ] | [  ! -d $ArchPath ]; 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с шаблоном имени: "$ArchPath$ArchTemplate" Каталог "$ArchPath" не доступен для записи или не явлется каталогом \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	fi

	#Формируем имя архива
	printf "\n" >> $BackupLog

	#Ищем имя самого последнего ежемесячного архива 
	OldEndMonthlyArh=`ls -t $ArchPath$ArchTemplate"-monthly"* -print 2>/dev/null | head -1`
			
	#Проверяем а есть ли вообще последний ежемесячный архив
	if [ $OldEndMonthlyArh ]; 
	then
		#Если у нового архива месяц новый и ArhNumMonthly>0 то суфикс имени архива будет monthly
		if [ ${OldEndMonthlyArh:(-24):2} != `date +%m` ] && [ $ArhNumMonthly -gt 0 ]; 
		then
			ArhSufix="monthly"
		fi
	fi

	#Ищем имя самого последнего еженедельного архива
	OldEndWeeklyArh=`ls -t $ArchPath$ArchTemplate"-weekly"* -print 2>/dev/null | head -1`

	#Проверяем а есть ли вообще последний ежемесячный архив
	if [ $OldEndWeeklyArh ]; 
	then
		#Если неделя изменилась, а ArсhSufix="" и ArсhNumWeekly>0 то суфикс имени архива будет weekly 
		if [ ${OldEndWeeklyArh:(-18):2} != `date +%U` ] && [ $ArhNumWeekly -gt 0 ] && [ ! $ArhSufix ]; 
		then
			ArhSufix="weekly"
		fi
	fi

	#Если ArсhSufix="" и ArсhNumDaily>0 то суфикс имени архива будет daily
	if [ $ArhNumDaily -gt 0 ] && [ ! $ArhSufix ]; 
	then
		ArhSufix="daily"
	fi

	#Если суфикс архива не определен то ошибка задачи параметров архива
	if [ ! $ArhSufix ]; 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с шаблоном имени: "$ArchPath$ArchTemplate" Не задано ненулевое количество архивов \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	else
		#Иначе генерируем имя нового архива 
		ArchFullName=$ArchPath$ArchTemplate"-"$ArhSufix"-"`(date +%Y-%m-%d-%U-%H_%M_%S)`".tar.gz"
	fi

	#Если файл с таким именем архива существует - то ошибка архива
	if [ -a $ArchFullName ]; 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" Архив с таким именем уже существует - архив не создан \n" >> $BackupLog
		flagOKGlobal=false
		flagOKLocal=false
	fi

	#Если ошибок подготовки архивации этого задания на архивацию не было, то начинаем архивацию
	if [ flagOKLocal ]; 
	then
		printf `(date +%Y-%m-%d-%H-%M-%S)`": Начало создания архива "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog
#		`tar -czpf $ArchFullName $SrcPath 2>> $BackupLog`

		#Проверяем удачно ли произошло архивирование
		if [ $? -eq 0 ];
		then
			printf `(date +%Y-%m-%d-%H-%M-%S)`": Архив "$ArchFullName" успешно создан \n" >> $BackupLog

			#Запускаем функцию удаления ненужных архивов (ротация архивов)
			funArhRotation

			#Выполняем внешний скрипт, если это необходимо
			if [ $ScriptName != "no" ] 
			then
				ScriptPatch=$INSTALL_DIR/$ScriptName
				if [ -r $ScriptPatch ]
				then
					#Если ошибка выполнения внешнего скрипта то ошибка архива
					printf `(date +%Y-%m-%d-%H-%M-%S)`": Начало выполнения внешнено скрипта "$ScriptName" для архива "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog
					. $ScriptPatch >> $BackupLog
					if [ $? -eq 0 ];
					then
						printf `(date +%Y-%m-%d-%H-%M-%S)`": Успешно выполен внешний скрипт "$ScriptName" для архива "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog
					else
						printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА выполения внешнего скрипта "$ScriptName" для архива "$ArchFullName" из источника "$SrcPath"\n" >> $BackupLog
					fi 
				else
					printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА для архива с именем: "$ArchFullName" из источника "$SrcPath" Дополнительный скрипт не найден или нет прав на чтение \n" >> $BackupLog
					flagOKGlobal=false
				fi
			fi

		else
			printf `(date +%Y-%m-%d-%H-%M-%S)`": ОШИБКА СОЗДАНИЯ АРХИВА с именем: "$ArchFullName" из источника "$SrcPath" Процесс создания архива прошел с ошибками \n" >> $BackupLog
			flagOKGlobal=false
		fi 
	fi
}


##############################
###  ТОЧКА СТАРТА СКРИПТА  ###

#Флаг  нормального завершения всей процедуры резервного копирования
flagOKGlobal=true

#Определяем путь запуска скрипта
# current path resolver from http://stackoverflow.com/a/246128
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
INSTALL_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#Задаем рассположение логфайлов
BackupLog="/var/log/FileBackup.log"
ErrorLog="/var/log/FileBackupERROR.log"


if [ ! -w $BackupLog ]
then
	`cat</dev/null>$BackupLog`
	if [ -a $BackupLog ] 
	then
		echo "Файл "$BackupLog" успешно создан"

		# Задаем права на чтение и редактирование для всех (666) на логфайл сессии резервного копирования
		`chmod 666 $BackupLog`
		if [ $? -ne 0 ];
		then 
			echo "Не удается задать права на логфайл "$BackupLog
			flagOKGlobal=false
		fi
	else
		echo "Не получается создать файл с именем "$BackupLog
		flagOKGlobal=false
	fi
fi

if [ ! -w $ErrorLog ]
then
	#Создание файла лога сессии резервного копирования 
	`cat</dev/null>$ErrorLog`
	if [ -a $ErrorLog ]; 
	then
		echo "Файл "$ErrorLog" успешно создан"
		# Задаем права на чтение и редактирование для всех (666) на логфайл ошибок сессии резервного копирования
		`chmod 666 $ErrorLog`
		if [ $? -ne 0 ];
		then 
			echo "Не удается задать права на логфайл "$ErrorLog
			flagOKGlobal=false
		fi
	else
		echo "Не получается создать файл с именем "$ErrorLog
		flagOKGlobal=false
	fi
fi

echo "Для установки скрипта в cron запустите crontab -e и добавтье следующую строку для выполнения каждый день в 23.30"
echo "30 23 * * * "$INSTALL_DIR"/FileBackup"

#Очищаем старый лог файл если он есть
cat /dev/null > $BackupLog
if [ $? -eq 0 ];
then 
	printf `(date +%Y-%m-%d-%H-%M-%S)`": Файл лога предыдущей сессии успешно удален \n" >> $BackupLog
else
	echo "Не возможно очистить лог сессии выполнения задания резервного копирования - задание остановленно !!!"
	flagOKGlobal=false
fi


if ( $flagOKGlobal );
then
	#Флаг для того чтобы в одном цикле считывать поочереди каждую строку для каждого источника архивирования
	SrcListStringIterator="0"
	
	#Очищаем файл с входными значениями заданий архитвации от комментариев и пропусков строк
	PurifiedListParam=`sed '/^\s*#/d;/^$/d;' $INSTALL_DIR/work.cfg`

	for NextListElement in $PurifiedListParam
	do
		case $SrcListStringIterator in
			"1"|"0" )
			SrcPath=$NextListElement
echo $SrcPath
			SrcListStringIterator="2"
				;;

			"2" )
			ArchPath=$NextListElement
echo $ArchPath
			SrcListStringIterator="3"
				;;

			"3" )
			ArchTemplate=$NextListElement
echo $ArchTemplate
			SrcListStringIterator="4"
				;;


			"4" )
			ExtParams=$NextListElement
echo $ExtParams
			SrcListStringIterator="1"

			#Разбираем строку дополнительных параетров
			ArhNumDaily=0
			ArhNumWeekly=0
			ArhNumMonthly=0
			ArhSufix=""
			ExtParamsStringIterator="0"

			
			IFS=$'|'; for NextParam in $ExtParams; 
			do
			 	case $ExtParamsStringIterator in
			 		"1"|"0" )
					ExtParamsStringIterator="2"
echo $ArhNumDaily
					ArhNumDaily=$NextParam
			 			;;
			 		"2" )
					ExtParamsStringIterator="3"
echo $ArhNumWeekly
					ArhNumWeekly=$NextParam
			 			;;
			 		"3" )
					ArhNumMonthly=$NextParam
echo $ArhNumMonthly
			 			;;	
			 	esac
			done 

			#Запускаем функцию создания архива для текущего задания архивации
			funArhCreation
				;;	
		esac
	done

	#Если все процессы архивирования прошли успешно, то очищаем лог ошибок. Если нет то отправляем лог текушей сессии с сообщением о ошибке по электронной почте 
	#и добавляем содержимое текущего лога в лог о ошибках
	if ( $flagOKGlobal );
	then
		echo "ВСЕ ЗАДАНИЯ АРХИВИРОВАНИЯ ВЫПОЛНЕННЫ УСПЕШНО. Подробности выполнения смотрте в логе "$BackupLog
		printf "\n" >> $BackupLog
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ВСЕ ЗАДАНИЯ АРХИВИРОВАНИЯ ВЫПОЛНЕННЫ УСПЕШНО" >> $BackupLog
		cat /dev/null > $ErrorLog
		###? сообщаем о успешном выполнении резервного копирования

		###? пишем в флаг файл дату и время последнего успешного завершения резервного копирования

	else
		echo "ПРИ ВЫПОЛНЕНИИ ЗАДАНИЙ АРХИВИРОВАНИЯ БЫЛИ ОБНАРУЖЕНЫ ОШИБКИ. Подробности выполнения смотрте в логе "$ErrorLog
		printf "\n" >> $BackupLog
		printf `(date +%Y-%m-%d-%H-%M-%S)`": ЗАДАНИЯ АРХИВИРОВАНИЯ ВЫПОЛНЕННЫ С ОШИБКАМИ !!! \n" >> $BackupLog
		printf "____________________________________________\n" >> $ErrorLog
		cat $BackupLog >> $ErrorLog
		###? отправляем $BackupLog с сообщением о ошибке

	fi
fi	